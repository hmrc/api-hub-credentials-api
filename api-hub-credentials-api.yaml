openapi: 3.0.1
info:
  title: API Hub Credentials API
  description: |
    This is used by the HIP Platform to pull updates and state
    of credentials
  version: "1.0"

servers: 
  - url: https://hip-portal.mdtp.protected/hip-portal-api/
    description: |
      **TODO** The production URL for getting access to the HIP Portal API

#Â This defines the default security and scopes if an endpoint doesn't define one
security: 
  - OAuth2:
    - credentialsRead

tags:
  - name: Credentials
  - name: Changes
    description: Get changes

paths:
  /v1/environments/{environment-id}/credentials/:
    get:
      summary: Get all credentials
      description: |
        Returns all the credentials and associated scopes for 
        an environment.
        
        # Phase 1 - Get all credentials
        
        Get all the credentials for an environment
        
        # Phase 2 - Add support for 'ETags'

        Return ETag header in the response payload
        HIP API Platform will poll this endpoint with the ETag of the last request
         - If ETag is missing return all credentials (same as ETag doesn't
          match). Used as part of a cold start up
         - If ETag matches (e.g. there are no changes) return 304 (Not Modified) status
         - If ETag doesn't match (e.g. there are changes) return all credentials (and API Platform will sync all credentials)
      security:
        - OAuth2:
          - registrationsCredentialsRead
      tags:
        - Credentials
      parameters:
        - in: path
          name: environment-id
          schema:
            type: string
            example: production
          required: true
      responses:
        200:
          description: A list of credentials to scope mappings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
  /v1/events:
    get:
      tags:
        - Changes
      summary:
        Get change events
      description: |
        # Thoughts:
        ## etags - **TODO**
        - Can we use etags?
        - Should we use etags?
        ## What key field to track the order items? **TODO**
        - Should we use timestamp, or an incrementing eventId?
      parameters:
        - in: query
          name: startTimestamp
          schema:
            type: string
            format: date-time
            example: 2022-01-01T12:00:00Z
          required: false
        - in: query
          name: endTimestamp
          schema:
            type: string
            format: date-time
            example: 2022-01-01T13:00:00Z
          required: false
        - in: query
          name: entityTypes
          style: spaceDelimited
          schema:
            description: |
              **TODO**: Is this this right list of entityTypes? Are there any more we care about?
            type: string
            enum:
              - Credential
          required: false
      responses:
        200:
          description: List of matching events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: |
        **TODO**: Need to correctly populate the token endpoint
      flows:
        clientCredentials:
          tokenUrl: http://hip-portal.mdtp/token
          scopes:
            credentialsRead: Get credential secrets

  schemas:
    Event:
      description: TODO - Include a URL to the location of the entity?
      type: object
      properties:
        eventTimestamp: 
          type: string
          example: 2022-01-01T13:20:15Z
        entityId:
          type: string
          example: 123
        entityType: 
          type: string
          enum:
           - Credential
          example: Credential
        eventType:
          type: string
          enum:
            - create
            - update
            - delete
          example: create
        environment:
          type: string
          example: production
        link:
          type: string
          description: |
            A link to the entity the event relates to
          example: /v1/environments/production/credentials/123
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'
      example:
        - eventTimestamp: 2022-01-02T13:15:00Z
          entityId: 123
          entityType: Credential
          eventType: create
          environment: production
          link: /v1/environments/production/credentials/123
        - eventTimestamp: 2022-01-02T13:30:00Z
          entityId: 456
          entityType: Credential
          eventType: delete
          environment: production
          link: /v1/environments/production/credentials/456
    Credentials:
      type: array
      items:
        $ref: "#/components/schemas/Credential"
      example:
        [
          {
            "credentialId" : "123",
            "clientId": "f8b71f85-7a5a-4389-8c55-0623dc6859fb",
            "clientSecret" : "N1okR3lmb1J4QThoIUBjbjVXams",
            "scopes" : [
              "scope-1",
              "scope-2"
            ]
          }, {
            "credentialId" : "456",
            "clientId": "260ef253-f24d-4186-8b3a-0d45409af1c3",
            "clientSecret" : "NGU5ZWU0ODAtNjBmNC0xMWVkLTliNmE",
            "scopes" : [
              "scope-2",
              "scope-3"
            ]
          }
        ]
    Credential:
      type: object
      properties:
        credentialId:
          description: | 
            **TOTO** Do we need a credentialId?
            How do we link a credential to the KeyCloak credential?
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        scopes:
          type: array
          items:
            type: string
